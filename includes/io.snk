import pandas as pd
import os
import re


def QC_output(_):
    '''
    switch for fastQC output depending on config rerun option
    '''
    out = ["QC/libraryQC.html", "QC/insertQC.html", "QC/fastQC.html"]
    return out


def get_files(folder_list, sample_sheet):
    '''
    retrieves the path to all the files in the sample_sheet
    if rerun == False, it looks for fastq files
    if rerun == True, it looks for bam files
    '''

    # check whether single folder or folder list
    if len(folder_list[0]) == 1:
        folder_list = [folder_list]

    # import the sample sheet
    # check full path or append path to scriptdir
    if not sample_sheet.startswith('/'):
        sample_sheet = os.path.join(snakedir, sample_sheet)
    show_output(f"Reading csv sample sheet {sample_sheet}")
    samples = pd.read_csv(sample_sheet, sep='\t', index_col=0).set_index('name')


    fastq_list = []
    short_list = []
    # cycle through the input folders and look for matching fastq files
    for input_folder in folder_list:
        for folder, _, files in os.walk(input_folder):
            for file in files:
                if '.fastq.' in file and '.md5' not in file and 'trim' not in file and 'sub' not in file:
                    fastq_list.append(os.path.join(folder, file))
                    short_list.append(file)

    def get_fastq_paths(row, fastq_list=None):
        '''
        go through the sample list and find the respective read and index fastqs in the respective fastq_list
        '''

        # get the nomenclature for the fastq files from config
        read1 = config['samples']['reads'][0]
        read2 = config['samples']['reads'][1]
        index = config['samples']['umi_barcode']

        for file in fastq_list:
            # get the basename
            base_file = os.path.basename(file)
            if  base_file.startswith(f"{row['sample']}_"):
                if f'_{index}' in base_file:
                    row['index'] = file
                elif 'barcode' in base_file:
                    row['barcode'] = file
                elif f'_{read1}' in base_file:
                    row['R1'] = file
                elif f'_{read2}' in base_file:
                    row['R2'] = file
        return row.reindex(['Lane', 'R1', 'R2', 'barcode', 'index'])

    samples_df = samples.apply(get_fastq_paths, axis=1, fastq_list=fastq_list)
    short_df = samples.apply(get_fastq_paths, axis=1, fastq_list=short_list)

    # samples_df.index = samples_df.index.str.lstrip('0')
    # short_df.index = short_df.index.str.lstrip('0')
    # ########## DEBUG #################
    print(short_df)
    # print(samples_df)
    # ##################################

    return samples_df, short_df


def get_shell(script_name):
    '''
    takes the script_name and returns abspath to shell script located in snakedir/scripts/shell
    '''
    return os.path.join(scriptdir, f"shell/{script_name}")



def get_fastqs(w):
    sample_name = f"{w.sample}"
    fastq_path = sample_df.loc[sample_name][w.read_or_index]
    return fastq_path


def get_lane(w):
    sample_name = f"{w.sample}"
    lane = sample_df.loc[sample_name]['Lane']
    return lane

# ###################### ubamXT #########################################

def get_FastqToSam_input(w):
    '''
    retrieve either ...fastq or fastq.trim pairs depending on config:trim:trimming value for bwa alignment
    '''

    fastqs = [f"fastq/{w.sample}_{read}.{w.split}.fastq.gz" for read in ['R1', 'R2']]

    # add the umi.fastq if umi = True
    if config['setup']['UMI']:
        fastqs.append(f"fastq/{w.sample}_index.{w.split}.fastq.gz")
    return fastqs

# ###################### FASTQC ###########################


def get_fastq_input(w):
    '''
    retrieve either ...fastq or fastq.trim for fastQC
    '''

    return f"fastq/{w.sample}_{w.read}.fastq.gz"


def get_fastqc_list(_):
    '''
    returns the complete list of required fastqc files depending on trim option
    '''

    # create file list from the included_files tuple list
    fastqc_list = [f"fastqc/{s}_{r}_fastqc.zip" for s in sample_df.index for r in ['R1', 'R2']]
    return fastqc_list


# ############## INDEL REALIGNER ######################

def get_IR_input(w):
    '''
    complex sample switch depending on pipeline settings
    if UMIs are used, do not dedup before the UMI-filtering steps (if active)
    if UMI-filter is inactive, just dedup using umis
    if no UMIs are used, just mark_dups before realigning
    '''

    file_name = f"{w.sample}.{w.chrom}"
    if config['setup']['UMI']:
        if config['UMI_filter']['run']:
            bam = f"bam_merge/{file_name}.bam"
        else:
            bam = f"umi_deduped/{file_name}.bam"
    else:
        bam = f"deduped/{file_name}.bam"
    return {'bam': bam}

##########################################################


def get_bed_file(covered_or_padded):
    '''
    returns the appropriate bed_file depending on build and library if 
    '''
    if covered_or_padded == 'Padded':
        bed = 'bed_file_pad'
    else:
        bed = 'bed_file'
    bed_file = config['setup'].get(bed, None)
    if bed_file:
        return bed_file
    else:
        build = config['ref']['build']
        lib = config['setup']['library']
        lib_version = config['setup']['library_version']
        prefix = 'SS' if lib == 'SureSelect' else lib
        suffix = '_nochr' if build == 'hg19' else ''
        bed_name = f"{prefix}_{lib_version}_{build}_{covered_or_padded}{suffix}.bed"
        bed_file = os.path.join(config['paths']['mystatic'], 'bed_files', lib, build, bed_name)
        if os.path.isfile(bed_file):
            return bed_file
    return full_path(bed)


def full_path(file):

    '''
    returns the full path to a reference
    '''

    build = config['ref']['build']
    full_ref_path = os.path.join(config['paths']['mystatic'], config['ref'][build][file])
    return full_ref_path


def get_fastq_pair(w):
    '''
    input for coverBED
    '''
    return [f"fastq/{w.sample}_R{read}.fastq" for read in [1, 2]]


def get_umi_filter_input(w):
    '''
    input for umi_filtering depending on recalib config
    '''

    file_name = f"{w.sample}.{w.chrom}"

    if config['recalib']['run']:
        return f"recalib/{file_name}.bam"
    return f"realigned/{file_name}"


def get_finalsplit_input(w):
    '''
    input switch for bamfinal
    '''
    bam_file = f"{w.sample}.{w.chrom}.bam"

    # if not rerun, then use the appropriate chrom-split-bams to create symlinks in bamfinalsplit
    if config['setup']['UMI'] and config['UMI_filter']['run']:
        return f"umi/{w.sample}.UF.{w.chrom}.bam"
    elif config['recalib']['run']:
        return f"recalib/{bam_file}"
    return f"realigned/{bam_file}"