rule merge_bam:
    '''
    here the split and umified bams are merged
    depending on input required by recalib, this can be umi/X-Y.bam or mapped
    !!! the merge has to retain the bam headers of the individual files

    '''

    input:  # here I need a switch if no UMI is involved
        expand("mapped/{{sample}}.{split}.bam", split=list(range(config['fastq']['split_factor'])))
    output:
        bam = "bam_merge/{sample}.bam"    # sambamba automatically creates a bam.bai
    threads:
        config['merge_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba merge -t {threads} {output.bam} mapped/{wildcards.sample}.*.bam; "
        "rm {input};"

        # OPTIONB: picard AddOrReplaceReadGroups

rule resplit_bam:
    '''
    chromosome-split merged bams into chromosome-split bams (one split per job) with index
    '''

    input:
        bam = "bam_merge/{sample}.bam"
    output:
        bam = "bam_merge/{sample}.{chrom}.bam"
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba view -t {threads} -h -f bam -o {output.bam} {input.bam} {wildcards.chrom} "


######### FINAL BAM AND SPLIT ########################
rule final_split_bam:
    """
    creates symlinks to the appropriate chrom_split_bams needed for merge_final_bam
    prevents me from making a merge_final_bam list expansion
    """

    input: 
        get_finalsplit_input
    output:
        bam = "bamfinalsplit/{sample}.{chrom}.bam"
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "ln -s $(pwd)/{input} {output.bam}; sambamba index {output.bam}"


rule merge_final_bam:
    '''
    bamfinal is also consumed by the bam QC
    '''

    input:
        bam = expand("bamfinalsplit/{{sample}}.{chrom}.bam", chrom=chrom_list)
    output:
        bam = "bamfinal/{sample}.bam"
    threads:
        config['merge_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba merge -t {threads} {output.bam} {input.bam}; sambamba index {output.bam}"
