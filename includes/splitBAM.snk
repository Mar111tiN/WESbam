rule index_split_bam:
    input:
        "{folder}/{sample}_{type}.{chrom_split}.bam"
    output:
        "{folder}/{sample}_{type}.{chrom_split}.bai"
    threads:
        config['bamindex']['threads']
    conda:
        f"../{config['envs']}/align-env.yml"
    shell:
        "picard BuildBamIndex INPUT={input}"

rule index_bam:
    input:
        "{folder}/{sample}_{type}.bam"
    output:
        "{folder}/{sample}_{type}.bai"
    threads:
        config['bamindex']['threads']
    conda:
        f"../{config['envs']}/align-env.yml"
    shell:
        "picard BuildBamIndex INPUT={input}"

rule merge_bam:
    '''
    here the split and umified bams are merged
    depending on input required by recalib, this can be umi/X-Y.bam or mapped
    !!! the merge has to retain the bam headers of the individual files

    '''

    input:  # here I need a switch if no UMI is involved
        expand("mapped/{{sample}}_{{type}}.{split}.bam", split=list(range(config['fastq']['split_factor'])))
    output:
        bam = "bam_merge/{sample}_{type}.bam",
        bai = "bam_merge/{sample}_{type}.bam.bai"  # sambamba automatically creates a bam.bai
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba merge -t {threads} {output.bam} mapped/{wildcards.sample}_{wildcards.type}.*.bam; "
        "rm {input};"

        # OPTIONB: picard AddOrReplaceReadGroups

rule resplit_bam:
    '''
    chromosome-split merged bams into chromosome-split bams (one split per job) with index
    '''

    input:
        bam = "bam_merge/{sample}_{type}.bam"
    output:
        bam = "bam_merge/{sample}_{type}.{chrom}.bam",
        bai = "bam_merge/{sample}_{type}.{chrom}.bam.bai"
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba view -t {threads} -h -f bam -o {output.bam} {input.bam} {wildcards.chrom} "


############# rerun ##############################################

rule get_rerun_bam:
    input:
        get_rerun_bam
    output:
        bam = "bamfinal/{sample}_{type}.bam"
    threads:
        1
    shell:
        "ln -s {input} {output}" # create a symlink in workdir/bamfinal
    

rule split_rerun_bam:
    """
    if you do a rerun of final bams, this creates the split bams needed to go on with the pipeline
    """

    input: 
        bam = "bamfinal/{sample}_{type}.bam"
    output:
        bam = "rerunbamsplit/{sample}_{type}.{chrom}.bam",
        bai = "rerunbamsplit/{sample}_{type}.{chrom}.bai"
    threads:
        config['resplit_bam']['threads']
    conda:
        f"../{config['envs']}/samba-env.yml"
    shell:
        "sambamba view -t {threads} -h -f bam -o {output.bam} {input.bam} {wildcards.chrom} "