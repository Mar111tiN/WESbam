# ################### SUBSAMPLE FASTQ ###############################################

if config['fastq']['subsample_normal_factor'] > 1:
    if f"_{config['samples']['normal']}_" in output[0]:
        lines = round(config['fastq']['subsample_normal_factor'] * 4)
        print(f"Subsampling normal file {input}")
        shell(f"gunzip < {{input}} | mawk 'NR % {lines} > 0 && NR % {lines} < 5' | pigz -5 -p {threads} > {{output}}")


rule tag_bam_with_umi:
    input:
        "mapped/{sample}_{type}.{split}.bam",
        "fastq/{sample}_{type}_index.{split}.fastq.gz"
    output:
        "umi/{sample}_{type}.{split}.bam",
        "umi/{sample}_{type}.{split}.bai"
    conda:
        "../env/fgbio-env.yml"
    threads:
        math.ceil(int(config['tag_bam']['max_mem'].strip('g')) / 2)
    params:
        max_mem = config['tag_bam']['max_mem']
    shell:
        "fgbio AnnotateBamWithUmis -Xms500m -Xmx{params.max_mem} -i {input[0]} -f {input[1]} -o {output[0]}"


def get_bwa_params(w, input, threads):
    samples = input[:2]
    refgen = full_path('genome')
    bwa_sample = f"{w.sample}_{w.type}"
    options = f"mem -M -t {threads} "
    options += f'-R "@RG\\tID:{bwa_sample}\\tSM:{bwa_sample}\\tPL:illumina\\tCN:exome" {refgen} '
    options += ' '.join(samples)
    return options


rule align_bwa:
    input:
        get_bwa_fastqs,
        os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        "mapped/{sample}_{type}.{split}.bam"
    log:
        "logs/mapped/{sample}_{type}.{split}.log"
    params:
        bwa = get_bwa_params,
        picard = lambda w, output: f"SortSam I=/dev/stdin O={output} SORT_ORDER=coordinate"
    conda:
        "../env/align-env.yml"
    threads:
        config['alignment']['threads']
    shell:
        "bwa {params.bwa} | sed -r '/^@PG/s/\\\\t/ /g' | picard {params.picard}"
