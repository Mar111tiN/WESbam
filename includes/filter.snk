# ################# FILTER ###################################################
rule filter_variants:
    input: "filter/{sample}_{tumor}-{norm}.csv"
    output: "filter/{sample}_{tumor}-{norm}.{filter}.csv"
    wildcard_constraints:
        sample = "[^_]+"
    conda:
        "../env/filter-env.yml"
    threads:
        config['filter']['threads']
    script:
        "../scripts/filter.py"


rule filter_bam:
    input:
        csv = "filter/{sample}_{tumor}-{normal}.{filter}.csv",
        tumor_bam = "recalib/{sample}_{tumor}.bam",
        tumor_bai = "recalib/{sample}_{tumor}.bai",
        normal_bam = "recalib/{sample}_{normal}.bam",
        normal_bai = "recalib/{sample}_{normal}.bai",
    output:
        # tumor_bam = "filter_bam/{sample}_{tumor}.{filter}.bam",
        # tumor_bai = "filter_bam/{sample}_{tumor}.{filter}.bai",
        # normal_bam = "filter_bam/{sample}_{normal}.{filter}.bam",
        # normal_bai = "filter_bam/{sample}_{normal}.{filter}.bai",
        done = "filter_bam/{sample}_{tumor}-{normal}.{filter}.done"
    conda:
        "../env/align-env.yml"
    threads:
        config['filter_bam']['threads']
    params:
        mut_bed_file = get_mut_bed,
        tumor_bam = lambda w, input: input.tumor_bam.replace(os.path.split(input.tumor_bam)[0], "filter_bam").replace(".bam", f".{w.filter}.bam"),
        normal_bam = lambda w, input: input.normal_bam.replace(os.path.split(input.normal_bam)[0], "filter_bam").replace(".bam", f".{w.filter}.bam")
    conda:
        "../env/align-env.yml"
    shell:
        "samtools view -bhL {params.mut_bed_file} {input.tumor_bam} > {params.tumor_bam}; "
        "picard BuildBamIndex INPUT={params.tumor_bam}; "
        "samtools view -bhL {params.mut_bed_file} {input.normal_bam} > {params.normal_bam}; "
        "picard BuildBamIndex INPUT={params.normal_bam}; "
        "rm -f filter_bam/{params.mut_bed_file}; "
        "touch {output.done}"

rule filter_pileup:
    input:
        "filter_bam/{sample}_{tumor}-{normal}.{filter}.done"
        # tumor_bam = "filter_bam/{sample}_{tumor}.{filter}.bam",
        # tumor_bai = "filter_bam/{sample}_{tumor}.{filter}.bai",
        # normal_bam = "filter_bam/{sample}_{normal}.{filter}.bam",
        # normal_bai = "filter_bam/{sample}_{normal}.{filter}.bai"
    output:
        "filter_bam/{sample}_{tumor}-{normal}.{filter}.pileup"
    threads:
        2
    conda:
        "../env/align-env.yml"
    params:
        input = lambda w: f"filter_bam/{w.sample}_{w.tumor}.{w.filter}.bam filter_bam/{w.sample}_{w.normal}.{w.filter}.bam",
        refgen = full_path('genome'),
        qual = f"-q {config['mpileup']['MAPQ']} -Q {config['mpileup']['Q']}"
    shell:
        "samtools mpileup -f {params.refgen} {params.qual} {params.input}> {output}"
