# ################# FILTER ###################################################
rule filter_variants:
    input: "filter/{sample}_{tumor}-{norm}.csv"
    output: "filter/{sample}_{tumor}-{norm}.{filter}.csv"
    wildcard_constraints:
        sample = "[^_]+"
    conda:
        "../env/filter-env.yml"
    threads:
        config['filter']['threads']
    script:
        "../scripts/filter.py"


def reduce_regions(df, padding):
    '''
    takes a mutation list and returns a region list using padding
    overlapping regions are reduced to one using the gap strategy
    '''

    df = df.sort_values('Start')
    df['Start'] = df['Start'] - padding
    df['End'] = df['End'] + padding
    # find the break points
    # if Start is greater than previous End (using shift), this is a gap --> df['gap'] = 1
    df['gap'] = df['Start'].gt(df['End'].shift()).astype('int')
    # id different reads according to gap
    # cumulative sum does not increase at df['gap'] == 0 and so these consecutive stretches are grouped together
    df['gap'] = df['gap'].cumsum()
    # groupby the coverage break group and condense individual coverage islands
    # agg has to contain the neccessary shared columns TransLength because it is needed for coverage computation
    new_df = df.groupby('gap').agg({'Start': 'min', 'End':'max'})
    new_df = new_df
    return new_df.reset_index('gap').drop(columns='gap')


def mut2bed(mut_file, padding, bed_file):
    # check for filter_bam folder (using general declaration for easy folder name changing)
    folder = os.path.split(bed_file)[0]
    if not os.path.isdir(folder):
        os.makedirs(folder)

    # use the prefix for getting the right mut_file
    prefix = config['filter_bam']['file_prefix']
    if prefix:
        mut_file = mut_file.replace(".csv", f".{prefix}.csv")

    # read the anno_file
    anno_df = pd.read_csv(mut_file, sep='\t').sort_values(['Chr', 'Start']).iloc[:,:5]
    if not len(anno_df.index):
        anno_df.to_csv(bed_file, index=False, sep='\t', header=False)
        return bed_file

    # get the bedfie with padded and collapsed regions
    bed_df = anno_df.groupby('Chr').apply(reduce_regions, padding)
    # remove Chr index
    bed_df = bed_df.reset_index().drop(columns='level_1')
    # write bed_df to file
    bed_df.to_csv(bed_file, index=False, sep='\t', header=False)
    return bed_file


def get_mut_bed(w, input):
    '''
    serves as a params function creating and returning the bed file for the samtools view
    '''

    padding = config['filter_bam']['padding']
    bed_file = mut2bed(input.csv, padding, f"filter_bam/{w.sample}_{w.tumor}-{w.normal}.bed")
    return bed_file


rule filter_bam:
    input:
        csv = "filter/{sample}_{tumor}-{normal}.{filter}.csv",
        tumor_bam = "recalib/{sample}_{tumor}.bam",
        tumor_bai = "recalib/{sample}_{tumor}.bai",
        normal_bam = "recalib/{sample}_{normal}.bam",
        normal_bai = "recalib/{sample}_{normal}.bai",
    output:
        # tumor_bam = "filter_bam/{sample}_{tumor}.{filter}.bam",
        # tumor_bai = "filter_bam/{sample}_{tumor}.{filter}.bai",
        # normal_bam = "filter_bam/{sample}_{normal}.{filter}.bam",
        # normal_bai = "filter_bam/{sample}_{normal}.{filter}.bai",
        done = "filter_bam/{sample}_{tumor}-{normal}.{filter}.done"
    conda:
        "../env/align-env.yml"
    threads:
        config['filter_bam']['threads']
    params:
        mut_bed_file = get_mut_bed,
        tumor_bam = lambda w,input: input.tumor_bam.replace(os.path.split(input.tumor_bam)[0], "filter_bam").replace(".bam", f".{w.filter}.bam"),
        normal_bam = lambda w,input: input.normal_bam.replace(os.path.split(input.normal_bam)[0], "filter_bam").replace(".bam", f".{w.filter}.bam")
    conda:
        "../env/align-env.yml"
    shell:
        "samtools view -bhL {params.mut_bed_file} {input.tumor_bam} > {params.tumor_bam}; "
        "picard BuildBamIndex INPUT={params.tumor_bam}; "
        "samtools view -bhL {params.mut_bed_file} {input.normal_bam} > {params.normal_bam}; "
        "picard BuildBamIndex INPUT={params.normal_bam}; "
        "rm -f filter_bam/{params.mut_bed_file}; "
        "touch {output.done}"

rule filter_pileup:
    input:
        "filter_bam/{sample}_{tumor}-{normal}.{filter}.done"
        # tumor_bam = "filter_bam/{sample}_{tumor}.{filter}.bam",
        # tumor_bai = "filter_bam/{sample}_{tumor}.{filter}.bai",
        # normal_bam = "filter_bam/{sample}_{normal}.{filter}.bam",
        # normal_bai = "filter_bam/{sample}_{normal}.{filter}.bai"
    output:
        "filter_bam/{sample}_{tumor}-{normal}.{filter}.pileup"
    threads:
        2
    conda:
        "../env/align-env.yml"
    params:
        input = lambda w: f"filter_bam/{w.sample}_{w.tumor}.{w.filter}.bam filter_bam/{w.sample}_{w.normal}.{w.filter}.bam",
        refgen = full_path('genome'),
        qual = f"-q {config['mpileup']['MAPQ']} -Q {config['mpileup']['Q']}" 
    shell:
        "samtools mpileup -f {params.refgen} {params.qual} {params.input}> {output}"    
