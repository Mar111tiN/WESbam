
rule umi_group:
    input:
        "recalib/{sample}_{type}.{chrom}.bam"
    output:
        "umi/{sample}_{type}.{chrom}.UG.bam"  # UG --> Umi-grouped
    threads:
        config['umi']['group']['threads']
    conda:
        "../env/ubam-env.yml"
    log:
        "logs/umi/{sample}_{type}.{chrom}.UG.log"
    params:
        mem = f"Xmx{config['umi']['group']['mem']}",
        strategy = config['umi']['group']['group_strategy'],
        min_map_q = config['umi']['group']['min_map_q'],
        edits = config['umi']['group']['edits']
    shell:
        "fgbio GroupReadsByUmi {params.mem} "
        "-i {input} -o {output} "
        "-s adjacency {params.strategy} "   # adjacency is the recommended method of grouping
        "-m {params.min_map_q} "
        "-e {params.edits} "  # for WES-data, 1 is good; for targeted >3


rule call_consensus:
    input:
        "umi/{sample}_{type}.{chrom}.UG.bam"
    output:
        "umi/{sample}_{type}.{chrom}.CR.bam"
    threads:
        config['umi']['call']['threads']
    conda:
        "../env/ubam-env.yml"
    params:
        mem = f"-Xmx{config['umi']['call']['mem']}",
        min_reads = config['umi']['min_reads'],
        error_pre = config['umi']['call']['error_rate_pre_umi'],
        error_post = config['umi']['call']['error_rate_post_umi']
        min_input_Q = config['umi']['call']['min_input_Q']
    shell:
        "fgbio CallConsensusReads {params.mem} "
        "-i {input} -o {output}"
        "-M {params.min_reads} "
        "-1 {params.error_pre} "
        "-2 {params.error_post} "
        "-m {params.min_input_Q} "
        "-B true "  # output-per-base-tags


rule filter_consensus:
    input:
        "umi/{sample}_{type}.{chrom}.CR.bam"
    output:
        "umi/{sample}_{type}.{chrom}.UF.bam"
    threads:
        config['umi']['filter']['threads']
    conda:
        "../env/ubam-env.yml"
    params:
        mem = f"-Xmx{config['umi']['filter']['mem']}",
        min_reads = config['umi']['min_reads'],
        max_read_error = config['umi']['filter']['max_error_rate_per_read'],
        max_base_error = config['umi']['filter']['max_error_rate_per_base'],
        min_Q = config['umi']['filter']['min_Q'],
        max_no_call = config['umi']['filter']['max_no_call']
    shell:
        "fgbio FilterConsensusReads {params.mem}"
        "-M {params.min_reads} "
        "-N {params.min_Q}"
        "-E {params.max_read_error} "
        "-e {params.max_base_error} "

rule remap_filtered:
    input:
        bam = "umi/{sample}_{type}.{chrom}.UF.bam",
        genome = os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        "umi/{sample}_{type}.{chrom}.Umapped.bam"
    log:
        "logs/Umapped/{sample}_{type}.{chrom}.log"
    threads:
        config['alignment']['threads'] + 4
    conda:
        "../env/align-env.yml"
    params:
        bwa_threads = config['alignment']['threads'],
        refgen = full_path('genome'),
        clip_overlap = "TRUE" if config['umi']['remap']['clip_overlap'] else "FALSE",
        clip_adapters = config['umi']['remap']['clip_adapters'],
        alignment_strategy = config['alignment']['strategy'],
        deflater = "use_jdk_deflater=true use_jdk_inflater=true" if config['alignment']['use_jdk'] else ""
    shell:
        "picard SamToFastq {params.deflater} "
        "I={input.bam} FASTQ=/dev/stdout "
        "ClIPPING_ATTRIBUTE=XT "        # use XT tag for clipping
        "CLIPPING_ACTION=2 "             # base-quality of clipped bases is set to 2
        "INTERLEAVE=TRUE "
        "NON_PF=TRUE "
        "TMP_DIR=$TMPDIR | "
        # pipe to bwa mem
        "bwa mem -M -t {params.bwa_threads} -p {params.refgen} /dev/stdin | "
        "picard MergeBamAlignment "
        "R={params.refgen} "
        "UNMAPPED_BAM={input.bam} "
        "ALIGNED_BAM=/dev/stdin "
        "O={output} "
        "CREATE_INDEX=TRUE "
        "ADD_MATE_CIGAR=TRUE "
        "ORIENTATIONS=FR"
        "CLIP_ADAPTERS={params.clip_adapters} "
        "CLIP_OVERLAPPING_READS={params.clip_overlap} "
        "INCLUDE_SECONDARY_ALIGNMENTS=true "
        "MAX_GAPS=-1 "
        "PRIMARY_ALIGNMENT_STRATEGY={params.alignment_strategy} "
        "VALIDATION_STRINGENCY=SILENT "
        "ALIGNER_PROPER_PAIR_FLAGS=true "
        "ATTRIBUTES_TO_RETAIN=XS "
        "ATTRIBUTES_TO_RETAIN=RX "
        "TMP_DIR=$TMPDIR "
