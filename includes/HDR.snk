rule filter_pileup:
    input:
        bam = "filterbamdone/{sample}_{tumor}-{normal}.filter1.done"
    output:
        pileup = "hdr/{sample}_{tumor}-{normal}.{chrom}.filter1.pileup"
    threads:
        2
    conda:
        f"../{config['envs']}/align-env.yml"
    params:
        # get both the tumor and the normal bam file as input to mpileup
        input = lambda w: f"{config['filter_bam']['folder']}/{w.sample}_{w.tumor}.filter1.bam {config['filter_bam']['folder']}/{w.sample}_{w.normal}.filter1.bam",
        refgen = full_path('genome'),
        qual = f"-q {config['mpileup']['MAPQ']} -Q {config['mpileup']['Q']}",
        cleanpileup = get_script('cleanpileup')
    shell:
        "samtools mpileup -f {params.refgen} -r {wildcards.chrom} {params.qual} {params.input} | {params.cleanpileup} > {output.pileup}"


rule detect_HDR:
    input:
        filter_file = "table/{sample}_{tumor}-{normal}.filter1.csv",
        filter_bam = "filterbamdone/{sample}_{tumor}-{normal}.filter1.done",
        pileup = "hdr/{sample}_{tumor}-{normal}.{chrom}.filter1.pileup"
    output:
        HDR_table = "hdr/{sample}_{tumor}-{normal}.{chrom}.filter1.HDR.csv"
    conda:
        f"../{config['envs']}/HDR-env.yml"
    threads:
        config['HDR']['threads']
    params:
        min_sim = config['HDR']['min_similarity'],
        min_q = config['HDR']['min_q'],
        min_HDR_count = config['HDR']['min_HDR_count']
    script:
        "../scripts/HDR.py"


rule mergeHDR:
    input:
        expand("hdr/{{sample}}_{{tumor}}-{{normal}}.{chrom}.filter1.HDR.csv", chrom=chrom_list)
    output:
        "table/{sample}_{tumor}-{normal}.filter1.HDR.csv"
    threads:
        1
    run:
        HDR_dfs = []
        for HDR_file in input:
            if os.path.isfile(HDR_file):
                if os.path.getsize(HDR_file ) > 20:
                    HDR_df = pd.read_csv(HDR_file, sep='\t', index_col=False)
                    # cleanup aftHDR
                    # shell(f"rm {EB_file}")
                    if HDR_df.empty:
                        continue
                    HDR_dfs.append(HDR_df)
        HDR_merge = pd.concat(HDR_dfs).sort_values(['Chr', 'Start'])

        # sort nicely
        cols = ['Chr', 'Start', 'End', 'Gene', 'Ref', 'Alt', 'NormalHDRcand', 'NormalHDRcount', 'NormalHDRinfo', 'Ref', 'Start', 'TumorHDRcand', 'TumorHDRcount', 'TumorHDRinfo']
        HDR_merge = HDR_merge[cols]
        HDR_merge.to_csv(output[0], sep='\t', index=False)
        show_output(f"Written HDR file to {output[0]}", color='success')