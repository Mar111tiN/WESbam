def get_sed(w):
    '''
    adjusts the sed command for the fasta.genome generation depending on the current genome build
    '''

    if config['ref']['build'] == 'hg19':
        sed_cmd = "/^>/s/^>([^. ]*)\\.?1? [^ ]+ .*:(.*):1$/\\1\\t\\2/p"
    elif config['ref']['build'] == 'hg38':
        sed_cmd = "/^>.*LN.*$/s/^>([^. ]*).*LN:([0-9]+) .*$/\\1\\t\\2/p"
    return sed_cmd


rule make_ref_genome:
    # creates ref-genome if not available and outputs a gen_ref.done flag in the respective folder
    output:
        touch(os.path.join(full_path('genome_path'), 'gen_ref.done'))
    threads:
        config['alignment']['threads']
    params:
        _dict = full_path('genome').replace('.fasta', '.dict').replace('.fa', '.dict'),
        sed_cmd = get_sed,
        refgen = full_path('genome')
    conda:
        "../env/align-env.yml"
    message:
        "Genome indexed by bwa"
    shell:
        "sed -nr '{params.sed_cmd}' < {params.refgen} > {params.refgen}.genome;"
        "picard CreateSequenceDictionary REFERENCE={params.refgen} OUTPUT={params._dict}; "
        "bwa index {params.refgen}; "
        "samtools faidx {params.refgen}"


def get_bwa_params(w, input, threads):
    samples = input[:2]
    refgen = full_path('genome')
    bwa_sample = f"{w.sample}_{w.type}"
    options = f"mem -M -t {threads} "
    options += f'-R "@RG\\tID:{bwa_sample}\\tSM:{bwa_sample}\\tPL:illumina\\tCN:exome" {refgen} '
    options += ' '.join(samples)
    return options


rule align_bwa:
    input:
        get_bwa_fastqs,
        os.path.join(full_path('genome_path'), 'gen_ref.done')
    output:
        "mapped/{sample}_{type}.{split}.bam"
    log:
        "logs/mapped/{sample}_{type}.{split}.log"
    params:
        bwa = get_bwa_params,
        picard = lambda w, output: f"SortSam I=/dev/stdin O={output} SORT_ORDER=coordinate"
    conda:
        "../env/align-env.yml"
    threads:
        config['alignment']['threads']
    shell:
        "bwa {params.bwa} | sed -r '/^@PG/s/\\\\t/ /g' | picard {params.picard}"


def get_chrom(c, use_chr=True):
    if c > 21:
        if c == 22:
            chrom = "X"
        if c == 23:
            chrom = "Y"
    else:
        chrom = c + 1        
    return f"chr{chrom}" if use_chr else chrom


# get the chrom list for  
chrom_list = [get_chrom(chrom, (config['ref']['build'] == 'hg38')) for chrom in range(24)]

rule split_bam:
    input:
        "mapped/{sample}_{type}.bam"
    output:
        expand("mapped/{{sample}}_{{type}}.{chrom}.bam", chrom=chrom_list)
    threads:
        1
    conda:
        "../env/align-env.yml"
    run:
        for chrom in chrom_list:
            out_file = input[0].replace(".bam", f".{chrom}.bam")
            shell("samtools view -hb {input} {chrom} > {out_file}")
